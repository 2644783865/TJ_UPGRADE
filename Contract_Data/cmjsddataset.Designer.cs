//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3634
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ZCZJ_DPF.Contract_Data {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("cmjsddataset")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class cmjsddataset : global::System.Data.DataSet {
        
        private jsddetailDataTable tablejsddetail;
        
        private jsdtotalDataTable tablejsdtotal;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public cmjsddataset() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected cmjsddataset(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["jsddetail"] != null)) {
                    base.Tables.Add(new jsddetailDataTable(ds.Tables["jsddetail"]));
                }
                if ((ds.Tables["jsdtotal"] != null)) {
                    base.Tables.Add(new jsdtotalDataTable(ds.Tables["jsdtotal"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public jsddetailDataTable jsddetail {
            get {
                return this.tablejsddetail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public jsdtotalDataTable jsdtotal {
            get {
                return this.tablejsdtotal;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            cmjsddataset cln = ((cmjsddataset)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["jsddetail"] != null)) {
                    base.Tables.Add(new jsddetailDataTable(ds.Tables["jsddetail"]));
                }
                if ((ds.Tables["jsdtotal"] != null)) {
                    base.Tables.Add(new jsdtotalDataTable(ds.Tables["jsdtotal"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablejsddetail = ((jsddetailDataTable)(base.Tables["jsddetail"]));
            if ((initTable == true)) {
                if ((this.tablejsddetail != null)) {
                    this.tablejsddetail.InitVars();
                }
            }
            this.tablejsdtotal = ((jsdtotalDataTable)(base.Tables["jsdtotal"]));
            if ((initTable == true)) {
                if ((this.tablejsdtotal != null)) {
                    this.tablejsdtotal.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "cmjsddataset";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/cmjsddataset.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablejsddetail = new jsddetailDataTable();
            base.Tables.Add(this.tablejsddetail);
            this.tablejsdtotal = new jsdtotalDataTable();
            base.Tables.Add(this.tablejsdtotal);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializejsddetail() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializejsdtotal() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            cmjsddataset ds = new cmjsddataset();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void jsddetailRowChangeEventHandler(object sender, jsddetailRowChangeEvent e);
        
        public delegate void jsdtotalRowChangeEventHandler(object sender, jsdtotalRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class jsddetailDataTable : global::System.Data.TypedTableBase<jsddetailRow> {
            
            private global::System.Data.DataColumn columnmarnm;
            
            private global::System.Data.DataColumn columnmargg;
            
            private global::System.Data.DataColumn columnmargb;
            
            private global::System.Data.DataColumn columnmarcz;
            
            private global::System.Data.DataColumn columnmarunit;
            
            private global::System.Data.DataColumn columnzxnum;
            
            private global::System.Data.DataColumn columnrecgdnum;
            
            private global::System.Data.DataColumn columnsjamount;
            
            private global::System.Data.DataColumn columnctprice;
            
            private global::System.Data.DataColumn columnctamount;
            
            private global::System.Data.DataColumn columnbezhu;
            
            private global::System.Data.DataColumn columnsumrecgdnum;
            
            private global::System.Data.DataColumn columnsumctamount;
            
            private global::System.Data.DataColumn columnsumsjamount;
            
            private global::System.Data.DataColumn columnsumzxnum;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public jsddetailDataTable() {
                this.TableName = "jsddetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal jsddetailDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected jsddetailDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn marnmColumn {
                get {
                    return this.columnmarnm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn marggColumn {
                get {
                    return this.columnmargg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn margbColumn {
                get {
                    return this.columnmargb;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn marczColumn {
                get {
                    return this.columnmarcz;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn marunitColumn {
                get {
                    return this.columnmarunit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn zxnumColumn {
                get {
                    return this.columnzxnum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn recgdnumColumn {
                get {
                    return this.columnrecgdnum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sjamountColumn {
                get {
                    return this.columnsjamount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ctpriceColumn {
                get {
                    return this.columnctprice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ctamountColumn {
                get {
                    return this.columnctamount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bezhuColumn {
                get {
                    return this.columnbezhu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sumrecgdnumColumn {
                get {
                    return this.columnsumrecgdnum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sumctamountColumn {
                get {
                    return this.columnsumctamount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sumsjamountColumn {
                get {
                    return this.columnsumsjamount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sumzxnumColumn {
                get {
                    return this.columnsumzxnum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public jsddetailRow this[int index] {
                get {
                    return ((jsddetailRow)(this.Rows[index]));
                }
            }
            
            public event jsddetailRowChangeEventHandler jsddetailRowChanging;
            
            public event jsddetailRowChangeEventHandler jsddetailRowChanged;
            
            public event jsddetailRowChangeEventHandler jsddetailRowDeleting;
            
            public event jsddetailRowChangeEventHandler jsddetailRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddjsddetailRow(jsddetailRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public jsddetailRow AddjsddetailRow(string marnm, string margg, string margb, string marcz, string marunit, string zxnum, string recgdnum, string sjamount, string ctprice, string ctamount, string bezhu, string sumrecgdnum, string sumctamount, string sumsjamount, string sumzxnum) {
                jsddetailRow rowjsddetailRow = ((jsddetailRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        marnm,
                        margg,
                        margb,
                        marcz,
                        marunit,
                        zxnum,
                        recgdnum,
                        sjamount,
                        ctprice,
                        ctamount,
                        bezhu,
                        sumrecgdnum,
                        sumctamount,
                        sumsjamount,
                        sumzxnum};
                rowjsddetailRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowjsddetailRow);
                return rowjsddetailRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                jsddetailDataTable cln = ((jsddetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new jsddetailDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnmarnm = base.Columns["marnm"];
                this.columnmargg = base.Columns["margg"];
                this.columnmargb = base.Columns["margb"];
                this.columnmarcz = base.Columns["marcz"];
                this.columnmarunit = base.Columns["marunit"];
                this.columnzxnum = base.Columns["zxnum"];
                this.columnrecgdnum = base.Columns["recgdnum"];
                this.columnsjamount = base.Columns["sjamount"];
                this.columnctprice = base.Columns["ctprice"];
                this.columnctamount = base.Columns["ctamount"];
                this.columnbezhu = base.Columns["bezhu"];
                this.columnsumrecgdnum = base.Columns["sumrecgdnum"];
                this.columnsumctamount = base.Columns["sumctamount"];
                this.columnsumsjamount = base.Columns["sumsjamount"];
                this.columnsumzxnum = base.Columns["sumzxnum"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnmarnm = new global::System.Data.DataColumn("marnm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmarnm);
                this.columnmargg = new global::System.Data.DataColumn("margg", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmargg);
                this.columnmargb = new global::System.Data.DataColumn("margb", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmargb);
                this.columnmarcz = new global::System.Data.DataColumn("marcz", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmarcz);
                this.columnmarunit = new global::System.Data.DataColumn("marunit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmarunit);
                this.columnzxnum = new global::System.Data.DataColumn("zxnum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnzxnum);
                this.columnrecgdnum = new global::System.Data.DataColumn("recgdnum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrecgdnum);
                this.columnsjamount = new global::System.Data.DataColumn("sjamount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsjamount);
                this.columnctprice = new global::System.Data.DataColumn("ctprice", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnctprice);
                this.columnctamount = new global::System.Data.DataColumn("ctamount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnctamount);
                this.columnbezhu = new global::System.Data.DataColumn("bezhu", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbezhu);
                this.columnsumrecgdnum = new global::System.Data.DataColumn("sumrecgdnum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsumrecgdnum);
                this.columnsumctamount = new global::System.Data.DataColumn("sumctamount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsumctamount);
                this.columnsumsjamount = new global::System.Data.DataColumn("sumsjamount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsumsjamount);
                this.columnsumzxnum = new global::System.Data.DataColumn("sumzxnum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsumzxnum);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public jsddetailRow NewjsddetailRow() {
                return ((jsddetailRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new jsddetailRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(jsddetailRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.jsddetailRowChanged != null)) {
                    this.jsddetailRowChanged(this, new jsddetailRowChangeEvent(((jsddetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.jsddetailRowChanging != null)) {
                    this.jsddetailRowChanging(this, new jsddetailRowChangeEvent(((jsddetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.jsddetailRowDeleted != null)) {
                    this.jsddetailRowDeleted(this, new jsddetailRowChangeEvent(((jsddetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.jsddetailRowDeleting != null)) {
                    this.jsddetailRowDeleting(this, new jsddetailRowChangeEvent(((jsddetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovejsddetailRow(jsddetailRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                cmjsddataset ds = new cmjsddataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "jsddetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class jsdtotalDataTable : global::System.Data.TypedTableBase<jsdtotalRow> {
            
            private global::System.Data.DataColumn columnPCON_NAME;
            
            private global::System.Data.DataColumn columnPCON_BCODE;
            
            private global::System.Data.DataColumn columnPCON_CUSTMNAME;
            
            private global::System.Data.DataColumn columnPCON_DEPOSITBANK;
            
            private global::System.Data.DataColumn columnPCON_BANKACUNUM;
            
            private global::System.Data.DataColumn columnPCON_BALANCEACNT;
            
            private global::System.Data.DataColumn columnPCON_RIQI;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public jsdtotalDataTable() {
                this.TableName = "jsdtotal";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal jsdtotalDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected jsdtotalDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PCON_NAMEColumn {
                get {
                    return this.columnPCON_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PCON_BCODEColumn {
                get {
                    return this.columnPCON_BCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PCON_CUSTMNAMEColumn {
                get {
                    return this.columnPCON_CUSTMNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PCON_DEPOSITBANKColumn {
                get {
                    return this.columnPCON_DEPOSITBANK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PCON_BANKACUNUMColumn {
                get {
                    return this.columnPCON_BANKACUNUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PCON_BALANCEACNTColumn {
                get {
                    return this.columnPCON_BALANCEACNT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PCON_RIQIColumn {
                get {
                    return this.columnPCON_RIQI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public jsdtotalRow this[int index] {
                get {
                    return ((jsdtotalRow)(this.Rows[index]));
                }
            }
            
            public event jsdtotalRowChangeEventHandler jsdtotalRowChanging;
            
            public event jsdtotalRowChangeEventHandler jsdtotalRowChanged;
            
            public event jsdtotalRowChangeEventHandler jsdtotalRowDeleting;
            
            public event jsdtotalRowChangeEventHandler jsdtotalRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddjsdtotalRow(jsdtotalRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public jsdtotalRow AddjsdtotalRow(string PCON_NAME, string PCON_BCODE, string PCON_CUSTMNAME, string PCON_DEPOSITBANK, string PCON_BANKACUNUM, string PCON_BALANCEACNT, string PCON_RIQI) {
                jsdtotalRow rowjsdtotalRow = ((jsdtotalRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PCON_NAME,
                        PCON_BCODE,
                        PCON_CUSTMNAME,
                        PCON_DEPOSITBANK,
                        PCON_BANKACUNUM,
                        PCON_BALANCEACNT,
                        PCON_RIQI};
                rowjsdtotalRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowjsdtotalRow);
                return rowjsdtotalRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                jsdtotalDataTable cln = ((jsdtotalDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new jsdtotalDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPCON_NAME = base.Columns["PCON_NAME"];
                this.columnPCON_BCODE = base.Columns["PCON_BCODE"];
                this.columnPCON_CUSTMNAME = base.Columns["PCON_CUSTMNAME"];
                this.columnPCON_DEPOSITBANK = base.Columns["PCON_DEPOSITBANK"];
                this.columnPCON_BANKACUNUM = base.Columns["PCON_BANKACUNUM"];
                this.columnPCON_BALANCEACNT = base.Columns["PCON_BALANCEACNT"];
                this.columnPCON_RIQI = base.Columns["PCON_RIQI"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPCON_NAME = new global::System.Data.DataColumn("PCON_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPCON_NAME);
                this.columnPCON_BCODE = new global::System.Data.DataColumn("PCON_BCODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPCON_BCODE);
                this.columnPCON_CUSTMNAME = new global::System.Data.DataColumn("PCON_CUSTMNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPCON_CUSTMNAME);
                this.columnPCON_DEPOSITBANK = new global::System.Data.DataColumn("PCON_DEPOSITBANK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPCON_DEPOSITBANK);
                this.columnPCON_BANKACUNUM = new global::System.Data.DataColumn("PCON_BANKACUNUM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPCON_BANKACUNUM);
                this.columnPCON_BALANCEACNT = new global::System.Data.DataColumn("PCON_BALANCEACNT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPCON_BALANCEACNT);
                this.columnPCON_RIQI = new global::System.Data.DataColumn("PCON_RIQI", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPCON_RIQI);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public jsdtotalRow NewjsdtotalRow() {
                return ((jsdtotalRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new jsdtotalRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(jsdtotalRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.jsdtotalRowChanged != null)) {
                    this.jsdtotalRowChanged(this, new jsdtotalRowChangeEvent(((jsdtotalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.jsdtotalRowChanging != null)) {
                    this.jsdtotalRowChanging(this, new jsdtotalRowChangeEvent(((jsdtotalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.jsdtotalRowDeleted != null)) {
                    this.jsdtotalRowDeleted(this, new jsdtotalRowChangeEvent(((jsdtotalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.jsdtotalRowDeleting != null)) {
                    this.jsdtotalRowDeleting(this, new jsdtotalRowChangeEvent(((jsdtotalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovejsdtotalRow(jsdtotalRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                cmjsddataset ds = new cmjsddataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "jsdtotalDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class jsddetailRow : global::System.Data.DataRow {
            
            private jsddetailDataTable tablejsddetail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal jsddetailRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablejsddetail = ((jsddetailDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string marnm {
                get {
                    try {
                        return ((string)(this[this.tablejsddetail.marnmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'marnm\' in table \'jsddetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablejsddetail.marnmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string margg {
                get {
                    try {
                        return ((string)(this[this.tablejsddetail.marggColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'margg\' in table \'jsddetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablejsddetail.marggColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string margb {
                get {
                    try {
                        return ((string)(this[this.tablejsddetail.margbColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'margb\' in table \'jsddetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablejsddetail.margbColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string marcz {
                get {
                    try {
                        return ((string)(this[this.tablejsddetail.marczColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'marcz\' in table \'jsddetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablejsddetail.marczColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string marunit {
                get {
                    try {
                        return ((string)(this[this.tablejsddetail.marunitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'marunit\' in table \'jsddetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablejsddetail.marunitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string zxnum {
                get {
                    try {
                        return ((string)(this[this.tablejsddetail.zxnumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'zxnum\' in table \'jsddetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablejsddetail.zxnumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string recgdnum {
                get {
                    try {
                        return ((string)(this[this.tablejsddetail.recgdnumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'recgdnum\' in table \'jsddetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablejsddetail.recgdnumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sjamount {
                get {
                    try {
                        return ((string)(this[this.tablejsddetail.sjamountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sjamount\' in table \'jsddetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablejsddetail.sjamountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ctprice {
                get {
                    try {
                        return ((string)(this[this.tablejsddetail.ctpriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ctprice\' in table \'jsddetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablejsddetail.ctpriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ctamount {
                get {
                    try {
                        return ((string)(this[this.tablejsddetail.ctamountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ctamount\' in table \'jsddetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablejsddetail.ctamountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string bezhu {
                get {
                    try {
                        return ((string)(this[this.tablejsddetail.bezhuColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'bezhu\' in table \'jsddetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablejsddetail.bezhuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sumrecgdnum {
                get {
                    try {
                        return ((string)(this[this.tablejsddetail.sumrecgdnumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sumrecgdnum\' in table \'jsddetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablejsddetail.sumrecgdnumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sumctamount {
                get {
                    try {
                        return ((string)(this[this.tablejsddetail.sumctamountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sumctamount\' in table \'jsddetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablejsddetail.sumctamountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sumsjamount {
                get {
                    try {
                        return ((string)(this[this.tablejsddetail.sumsjamountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sumsjamount\' in table \'jsddetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablejsddetail.sumsjamountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sumzxnum {
                get {
                    try {
                        return ((string)(this[this.tablejsddetail.sumzxnumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sumzxnum\' in table \'jsddetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablejsddetail.sumzxnumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmarnmNull() {
                return this.IsNull(this.tablejsddetail.marnmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmarnmNull() {
                this[this.tablejsddetail.marnmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmarggNull() {
                return this.IsNull(this.tablejsddetail.marggColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmarggNull() {
                this[this.tablejsddetail.marggColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmargbNull() {
                return this.IsNull(this.tablejsddetail.margbColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmargbNull() {
                this[this.tablejsddetail.margbColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmarczNull() {
                return this.IsNull(this.tablejsddetail.marczColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmarczNull() {
                this[this.tablejsddetail.marczColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmarunitNull() {
                return this.IsNull(this.tablejsddetail.marunitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmarunitNull() {
                this[this.tablejsddetail.marunitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IszxnumNull() {
                return this.IsNull(this.tablejsddetail.zxnumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetzxnumNull() {
                this[this.tablejsddetail.zxnumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrecgdnumNull() {
                return this.IsNull(this.tablejsddetail.recgdnumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrecgdnumNull() {
                this[this.tablejsddetail.recgdnumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssjamountNull() {
                return this.IsNull(this.tablejsddetail.sjamountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsjamountNull() {
                this[this.tablejsddetail.sjamountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsctpriceNull() {
                return this.IsNull(this.tablejsddetail.ctpriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetctpriceNull() {
                this[this.tablejsddetail.ctpriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsctamountNull() {
                return this.IsNull(this.tablejsddetail.ctamountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetctamountNull() {
                this[this.tablejsddetail.ctamountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbezhuNull() {
                return this.IsNull(this.tablejsddetail.bezhuColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbezhuNull() {
                this[this.tablejsddetail.bezhuColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssumrecgdnumNull() {
                return this.IsNull(this.tablejsddetail.sumrecgdnumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsumrecgdnumNull() {
                this[this.tablejsddetail.sumrecgdnumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssumctamountNull() {
                return this.IsNull(this.tablejsddetail.sumctamountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsumctamountNull() {
                this[this.tablejsddetail.sumctamountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssumsjamountNull() {
                return this.IsNull(this.tablejsddetail.sumsjamountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsumsjamountNull() {
                this[this.tablejsddetail.sumsjamountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssumzxnumNull() {
                return this.IsNull(this.tablejsddetail.sumzxnumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsumzxnumNull() {
                this[this.tablejsddetail.sumzxnumColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class jsdtotalRow : global::System.Data.DataRow {
            
            private jsdtotalDataTable tablejsdtotal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal jsdtotalRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablejsdtotal = ((jsdtotalDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PCON_NAME {
                get {
                    try {
                        return ((string)(this[this.tablejsdtotal.PCON_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PCON_NAME\' in table \'jsdtotal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablejsdtotal.PCON_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PCON_BCODE {
                get {
                    try {
                        return ((string)(this[this.tablejsdtotal.PCON_BCODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PCON_BCODE\' in table \'jsdtotal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablejsdtotal.PCON_BCODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PCON_CUSTMNAME {
                get {
                    try {
                        return ((string)(this[this.tablejsdtotal.PCON_CUSTMNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PCON_CUSTMNAME\' in table \'jsdtotal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablejsdtotal.PCON_CUSTMNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PCON_DEPOSITBANK {
                get {
                    try {
                        return ((string)(this[this.tablejsdtotal.PCON_DEPOSITBANKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PCON_DEPOSITBANK\' in table \'jsdtotal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablejsdtotal.PCON_DEPOSITBANKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PCON_BANKACUNUM {
                get {
                    try {
                        return ((string)(this[this.tablejsdtotal.PCON_BANKACUNUMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PCON_BANKACUNUM\' in table \'jsdtotal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablejsdtotal.PCON_BANKACUNUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PCON_BALANCEACNT {
                get {
                    try {
                        return ((string)(this[this.tablejsdtotal.PCON_BALANCEACNTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PCON_BALANCEACNT\' in table \'jsdtotal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablejsdtotal.PCON_BALANCEACNTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PCON_RIQI {
                get {
                    try {
                        return ((string)(this[this.tablejsdtotal.PCON_RIQIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PCON_RIQI\' in table \'jsdtotal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablejsdtotal.PCON_RIQIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPCON_NAMENull() {
                return this.IsNull(this.tablejsdtotal.PCON_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPCON_NAMENull() {
                this[this.tablejsdtotal.PCON_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPCON_BCODENull() {
                return this.IsNull(this.tablejsdtotal.PCON_BCODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPCON_BCODENull() {
                this[this.tablejsdtotal.PCON_BCODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPCON_CUSTMNAMENull() {
                return this.IsNull(this.tablejsdtotal.PCON_CUSTMNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPCON_CUSTMNAMENull() {
                this[this.tablejsdtotal.PCON_CUSTMNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPCON_DEPOSITBANKNull() {
                return this.IsNull(this.tablejsdtotal.PCON_DEPOSITBANKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPCON_DEPOSITBANKNull() {
                this[this.tablejsdtotal.PCON_DEPOSITBANKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPCON_BANKACUNUMNull() {
                return this.IsNull(this.tablejsdtotal.PCON_BANKACUNUMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPCON_BANKACUNUMNull() {
                this[this.tablejsdtotal.PCON_BANKACUNUMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPCON_BALANCEACNTNull() {
                return this.IsNull(this.tablejsdtotal.PCON_BALANCEACNTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPCON_BALANCEACNTNull() {
                this[this.tablejsdtotal.PCON_BALANCEACNTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPCON_RIQINull() {
                return this.IsNull(this.tablejsdtotal.PCON_RIQIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPCON_RIQINull() {
                this[this.tablejsdtotal.PCON_RIQIColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class jsddetailRowChangeEvent : global::System.EventArgs {
            
            private jsddetailRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public jsddetailRowChangeEvent(jsddetailRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public jsddetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class jsdtotalRowChangeEvent : global::System.EventArgs {
            
            private jsdtotalRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public jsdtotalRowChangeEvent(jsdtotalRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public jsdtotalRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591