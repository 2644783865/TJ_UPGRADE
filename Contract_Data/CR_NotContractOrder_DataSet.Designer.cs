//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3643
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ZCZJ_DPF.Contract_Data {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("CR_NotContractOrder_DataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class CR_NotContractOrder_DataSet : global::System.Data.DataSet {
        
        private TBPM_ORDER_CHECKREQUESTDataTable tableTBPM_ORDER_CHECKREQUEST;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CR_NotContractOrder_DataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected CR_NotContractOrder_DataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["TBPM_ORDER_CHECKREQUEST"] != null)) {
                    base.Tables.Add(new TBPM_ORDER_CHECKREQUESTDataTable(ds.Tables["TBPM_ORDER_CHECKREQUEST"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TBPM_ORDER_CHECKREQUESTDataTable TBPM_ORDER_CHECKREQUEST {
            get {
                return this.tableTBPM_ORDER_CHECKREQUEST;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            CR_NotContractOrder_DataSet cln = ((CR_NotContractOrder_DataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["TBPM_ORDER_CHECKREQUEST"] != null)) {
                    base.Tables.Add(new TBPM_ORDER_CHECKREQUESTDataTable(ds.Tables["TBPM_ORDER_CHECKREQUEST"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableTBPM_ORDER_CHECKREQUEST = ((TBPM_ORDER_CHECKREQUESTDataTable)(base.Tables["TBPM_ORDER_CHECKREQUEST"]));
            if ((initTable == true)) {
                if ((this.tableTBPM_ORDER_CHECKREQUEST != null)) {
                    this.tableTBPM_ORDER_CHECKREQUEST.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "CR_NotContractOrder_DataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/CR_NotContractOrder_DataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableTBPM_ORDER_CHECKREQUEST = new TBPM_ORDER_CHECKREQUESTDataTable();
            base.Tables.Add(this.tableTBPM_ORDER_CHECKREQUEST);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTBPM_ORDER_CHECKREQUEST() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            CR_NotContractOrder_DataSet ds = new CR_NotContractOrder_DataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void TBPM_ORDER_CHECKREQUESTRowChangeEventHandler(object sender, TBPM_ORDER_CHECKREQUESTRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TBPM_ORDER_CHECKREQUESTDataTable : global::System.Data.TypedTableBase<TBPM_ORDER_CHECKREQUESTRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnDQ_ID;
            
            private global::System.Data.DataColumn columnDQ_DATA;
            
            private global::System.Data.DataColumn columnDQ_QKBM;
            
            private global::System.Data.DataColumn columnDQ_BMNAME;
            
            private global::System.Data.DataColumn columnDQ_QKR;
            
            private global::System.Data.DataColumn columnDQ_USE;
            
            private global::System.Data.DataColumn columnDQ_DDCode;
            
            private global::System.Data.DataColumn columnDQ_DDZJE;
            
            private global::System.Data.DataColumn columnDQ_CSCODE;
            
            private global::System.Data.DataColumn columnDQ_CSName;
            
            private global::System.Data.DataColumn columnDQ_CSBank;
            
            private global::System.Data.DataColumn columnDQ_CSAccount;
            
            private global::System.Data.DataColumn columnDQ_AMOUNT;
            
            private global::System.Data.DataColumn columnDQ_AMOUNTDX;
            
            private global::System.Data.DataColumn columnDQ_ZFFS;
            
            private global::System.Data.DataColumn columnDQ_BillCode;
            
            private global::System.Data.DataColumn columnDQ_STATE;
            
            private global::System.Data.DataColumn columnDQ_BMYJ;
            
            private global::System.Data.DataColumn columnDQ_ZGLD;
            
            private global::System.Data.DataColumn columnDQ_GSLD;
            
            private global::System.Data.DataColumn columnDQ_CWSH;
            
            private global::System.Data.DataColumn columnDQ_Note;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TBPM_ORDER_CHECKREQUESTDataTable() {
                this.TableName = "TBPM_ORDER_CHECKREQUEST";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TBPM_ORDER_CHECKREQUESTDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TBPM_ORDER_CHECKREQUESTDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DQ_IDColumn {
                get {
                    return this.columnDQ_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DQ_DATAColumn {
                get {
                    return this.columnDQ_DATA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DQ_QKBMColumn {
                get {
                    return this.columnDQ_QKBM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DQ_BMNAMEColumn {
                get {
                    return this.columnDQ_BMNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DQ_QKRColumn {
                get {
                    return this.columnDQ_QKR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DQ_USEColumn {
                get {
                    return this.columnDQ_USE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DQ_DDCodeColumn {
                get {
                    return this.columnDQ_DDCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DQ_DDZJEColumn {
                get {
                    return this.columnDQ_DDZJE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DQ_CSCODEColumn {
                get {
                    return this.columnDQ_CSCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DQ_CSNameColumn {
                get {
                    return this.columnDQ_CSName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DQ_CSBankColumn {
                get {
                    return this.columnDQ_CSBank;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DQ_CSAccountColumn {
                get {
                    return this.columnDQ_CSAccount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DQ_AMOUNTColumn {
                get {
                    return this.columnDQ_AMOUNT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DQ_AMOUNTDXColumn {
                get {
                    return this.columnDQ_AMOUNTDX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DQ_ZFFSColumn {
                get {
                    return this.columnDQ_ZFFS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DQ_BillCodeColumn {
                get {
                    return this.columnDQ_BillCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DQ_STATEColumn {
                get {
                    return this.columnDQ_STATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DQ_BMYJColumn {
                get {
                    return this.columnDQ_BMYJ;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DQ_ZGLDColumn {
                get {
                    return this.columnDQ_ZGLD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DQ_GSLDColumn {
                get {
                    return this.columnDQ_GSLD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DQ_CWSHColumn {
                get {
                    return this.columnDQ_CWSH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DQ_NoteColumn {
                get {
                    return this.columnDQ_Note;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TBPM_ORDER_CHECKREQUESTRow this[int index] {
                get {
                    return ((TBPM_ORDER_CHECKREQUESTRow)(this.Rows[index]));
                }
            }
            
            public event TBPM_ORDER_CHECKREQUESTRowChangeEventHandler TBPM_ORDER_CHECKREQUESTRowChanging;
            
            public event TBPM_ORDER_CHECKREQUESTRowChangeEventHandler TBPM_ORDER_CHECKREQUESTRowChanged;
            
            public event TBPM_ORDER_CHECKREQUESTRowChangeEventHandler TBPM_ORDER_CHECKREQUESTRowDeleting;
            
            public event TBPM_ORDER_CHECKREQUESTRowChangeEventHandler TBPM_ORDER_CHECKREQUESTRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTBPM_ORDER_CHECKREQUESTRow(TBPM_ORDER_CHECKREQUESTRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TBPM_ORDER_CHECKREQUESTRow AddTBPM_ORDER_CHECKREQUESTRow(
                        string DQ_ID, 
                        System.DateTime DQ_DATA, 
                        string DQ_QKBM, 
                        string DQ_BMNAME, 
                        string DQ_QKR, 
                        string DQ_USE, 
                        string DQ_DDCode, 
                        decimal DQ_DDZJE, 
                        string DQ_CSCODE, 
                        string DQ_CSName, 
                        string DQ_CSBank, 
                        string DQ_CSAccount, 
                        decimal DQ_AMOUNT, 
                        string DQ_AMOUNTDX, 
                        string DQ_ZFFS, 
                        string DQ_BillCode, 
                        int DQ_STATE, 
                        string DQ_BMYJ, 
                        string DQ_ZGLD, 
                        string DQ_GSLD, 
                        string DQ_CWSH, 
                        string DQ_Note) {
                TBPM_ORDER_CHECKREQUESTRow rowTBPM_ORDER_CHECKREQUESTRow = ((TBPM_ORDER_CHECKREQUESTRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        DQ_ID,
                        DQ_DATA,
                        DQ_QKBM,
                        DQ_BMNAME,
                        DQ_QKR,
                        DQ_USE,
                        DQ_DDCode,
                        DQ_DDZJE,
                        DQ_CSCODE,
                        DQ_CSName,
                        DQ_CSBank,
                        DQ_CSAccount,
                        DQ_AMOUNT,
                        DQ_AMOUNTDX,
                        DQ_ZFFS,
                        DQ_BillCode,
                        DQ_STATE,
                        DQ_BMYJ,
                        DQ_ZGLD,
                        DQ_GSLD,
                        DQ_CWSH,
                        DQ_Note};
                rowTBPM_ORDER_CHECKREQUESTRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTBPM_ORDER_CHECKREQUESTRow);
                return rowTBPM_ORDER_CHECKREQUESTRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TBPM_ORDER_CHECKREQUESTRow FindByID(int ID) {
                return ((TBPM_ORDER_CHECKREQUESTRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TBPM_ORDER_CHECKREQUESTDataTable cln = ((TBPM_ORDER_CHECKREQUESTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TBPM_ORDER_CHECKREQUESTDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnDQ_ID = base.Columns["DQ_ID"];
                this.columnDQ_DATA = base.Columns["DQ_DATA"];
                this.columnDQ_QKBM = base.Columns["DQ_QKBM"];
                this.columnDQ_BMNAME = base.Columns["DQ_BMNAME"];
                this.columnDQ_QKR = base.Columns["DQ_QKR"];
                this.columnDQ_USE = base.Columns["DQ_USE"];
                this.columnDQ_DDCode = base.Columns["DQ_DDCode"];
                this.columnDQ_DDZJE = base.Columns["DQ_DDZJE"];
                this.columnDQ_CSCODE = base.Columns["DQ_CSCODE"];
                this.columnDQ_CSName = base.Columns["DQ_CSName"];
                this.columnDQ_CSBank = base.Columns["DQ_CSBank"];
                this.columnDQ_CSAccount = base.Columns["DQ_CSAccount"];
                this.columnDQ_AMOUNT = base.Columns["DQ_AMOUNT"];
                this.columnDQ_AMOUNTDX = base.Columns["DQ_AMOUNTDX"];
                this.columnDQ_ZFFS = base.Columns["DQ_ZFFS"];
                this.columnDQ_BillCode = base.Columns["DQ_BillCode"];
                this.columnDQ_STATE = base.Columns["DQ_STATE"];
                this.columnDQ_BMYJ = base.Columns["DQ_BMYJ"];
                this.columnDQ_ZGLD = base.Columns["DQ_ZGLD"];
                this.columnDQ_GSLD = base.Columns["DQ_GSLD"];
                this.columnDQ_CWSH = base.Columns["DQ_CWSH"];
                this.columnDQ_Note = base.Columns["DQ_Note"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnDQ_ID = new global::System.Data.DataColumn("DQ_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDQ_ID);
                this.columnDQ_DATA = new global::System.Data.DataColumn("DQ_DATA", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDQ_DATA);
                this.columnDQ_QKBM = new global::System.Data.DataColumn("DQ_QKBM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDQ_QKBM);
                this.columnDQ_BMNAME = new global::System.Data.DataColumn("DQ_BMNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDQ_BMNAME);
                this.columnDQ_QKR = new global::System.Data.DataColumn("DQ_QKR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDQ_QKR);
                this.columnDQ_USE = new global::System.Data.DataColumn("DQ_USE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDQ_USE);
                this.columnDQ_DDCode = new global::System.Data.DataColumn("DQ_DDCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDQ_DDCode);
                this.columnDQ_DDZJE = new global::System.Data.DataColumn("DQ_DDZJE", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDQ_DDZJE);
                this.columnDQ_CSCODE = new global::System.Data.DataColumn("DQ_CSCODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDQ_CSCODE);
                this.columnDQ_CSName = new global::System.Data.DataColumn("DQ_CSName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDQ_CSName);
                this.columnDQ_CSBank = new global::System.Data.DataColumn("DQ_CSBank", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDQ_CSBank);
                this.columnDQ_CSAccount = new global::System.Data.DataColumn("DQ_CSAccount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDQ_CSAccount);
                this.columnDQ_AMOUNT = new global::System.Data.DataColumn("DQ_AMOUNT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDQ_AMOUNT);
                this.columnDQ_AMOUNTDX = new global::System.Data.DataColumn("DQ_AMOUNTDX", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDQ_AMOUNTDX);
                this.columnDQ_ZFFS = new global::System.Data.DataColumn("DQ_ZFFS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDQ_ZFFS);
                this.columnDQ_BillCode = new global::System.Data.DataColumn("DQ_BillCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDQ_BillCode);
                this.columnDQ_STATE = new global::System.Data.DataColumn("DQ_STATE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDQ_STATE);
                this.columnDQ_BMYJ = new global::System.Data.DataColumn("DQ_BMYJ", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDQ_BMYJ);
                this.columnDQ_ZGLD = new global::System.Data.DataColumn("DQ_ZGLD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDQ_ZGLD);
                this.columnDQ_GSLD = new global::System.Data.DataColumn("DQ_GSLD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDQ_GSLD);
                this.columnDQ_CWSH = new global::System.Data.DataColumn("DQ_CWSH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDQ_CWSH);
                this.columnDQ_Note = new global::System.Data.DataColumn("DQ_Note", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDQ_Note);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnDQ_ID.AllowDBNull = false;
                this.columnDQ_ID.MaxLength = 50;
                this.columnDQ_DATA.AllowDBNull = false;
                this.columnDQ_QKBM.AllowDBNull = false;
                this.columnDQ_QKBM.MaxLength = 50;
                this.columnDQ_BMNAME.MaxLength = 30;
                this.columnDQ_QKR.AllowDBNull = false;
                this.columnDQ_QKR.MaxLength = 50;
                this.columnDQ_USE.MaxLength = 100;
                this.columnDQ_DDCode.MaxLength = 300;
                this.columnDQ_CSCODE.MaxLength = 50;
                this.columnDQ_CSName.MaxLength = 100;
                this.columnDQ_CSBank.AllowDBNull = false;
                this.columnDQ_CSBank.MaxLength = 100;
                this.columnDQ_CSAccount.AllowDBNull = false;
                this.columnDQ_CSAccount.MaxLength = 100;
                this.columnDQ_AMOUNT.AllowDBNull = false;
                this.columnDQ_AMOUNTDX.AllowDBNull = false;
                this.columnDQ_AMOUNTDX.MaxLength = 200;
                this.columnDQ_ZFFS.AllowDBNull = false;
                this.columnDQ_ZFFS.MaxLength = 50;
                this.columnDQ_BillCode.MaxLength = 100;
                this.columnDQ_STATE.AllowDBNull = false;
                this.columnDQ_BMYJ.MaxLength = 10;
                this.columnDQ_ZGLD.MaxLength = 10;
                this.columnDQ_GSLD.MaxLength = 10;
                this.columnDQ_CWSH.MaxLength = 10;
                this.columnDQ_Note.MaxLength = 300;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TBPM_ORDER_CHECKREQUESTRow NewTBPM_ORDER_CHECKREQUESTRow() {
                return ((TBPM_ORDER_CHECKREQUESTRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TBPM_ORDER_CHECKREQUESTRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TBPM_ORDER_CHECKREQUESTRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TBPM_ORDER_CHECKREQUESTRowChanged != null)) {
                    this.TBPM_ORDER_CHECKREQUESTRowChanged(this, new TBPM_ORDER_CHECKREQUESTRowChangeEvent(((TBPM_ORDER_CHECKREQUESTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TBPM_ORDER_CHECKREQUESTRowChanging != null)) {
                    this.TBPM_ORDER_CHECKREQUESTRowChanging(this, new TBPM_ORDER_CHECKREQUESTRowChangeEvent(((TBPM_ORDER_CHECKREQUESTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TBPM_ORDER_CHECKREQUESTRowDeleted != null)) {
                    this.TBPM_ORDER_CHECKREQUESTRowDeleted(this, new TBPM_ORDER_CHECKREQUESTRowChangeEvent(((TBPM_ORDER_CHECKREQUESTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TBPM_ORDER_CHECKREQUESTRowDeleting != null)) {
                    this.TBPM_ORDER_CHECKREQUESTRowDeleting(this, new TBPM_ORDER_CHECKREQUESTRowChangeEvent(((TBPM_ORDER_CHECKREQUESTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTBPM_ORDER_CHECKREQUESTRow(TBPM_ORDER_CHECKREQUESTRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CR_NotContractOrder_DataSet ds = new CR_NotContractOrder_DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TBPM_ORDER_CHECKREQUESTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TBPM_ORDER_CHECKREQUESTRow : global::System.Data.DataRow {
            
            private TBPM_ORDER_CHECKREQUESTDataTable tableTBPM_ORDER_CHECKREQUEST;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TBPM_ORDER_CHECKREQUESTRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTBPM_ORDER_CHECKREQUEST = ((TBPM_ORDER_CHECKREQUESTDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableTBPM_ORDER_CHECKREQUEST.IDColumn]));
                }
                set {
                    this[this.tableTBPM_ORDER_CHECKREQUEST.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DQ_ID {
                get {
                    return ((string)(this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_IDColumn]));
                }
                set {
                    this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DQ_DATA {
                get {
                    return ((global::System.DateTime)(this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_DATAColumn]));
                }
                set {
                    this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_DATAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DQ_QKBM {
                get {
                    return ((string)(this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_QKBMColumn]));
                }
                set {
                    this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_QKBMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DQ_BMNAME {
                get {
                    try {
                        return ((string)(this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_BMNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DQ_BMNAME\' in table \'TBPM_ORDER_CHECKREQUEST\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_BMNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DQ_QKR {
                get {
                    return ((string)(this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_QKRColumn]));
                }
                set {
                    this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_QKRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DQ_USE {
                get {
                    try {
                        return ((string)(this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_USEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DQ_USE\' in table \'TBPM_ORDER_CHECKREQUEST\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_USEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DQ_DDCode {
                get {
                    try {
                        return ((string)(this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_DDCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DQ_DDCode\' in table \'TBPM_ORDER_CHECKREQUEST\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_DDCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DQ_DDZJE {
                get {
                    try {
                        return ((decimal)(this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_DDZJEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DQ_DDZJE\' in table \'TBPM_ORDER_CHECKREQUEST\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_DDZJEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DQ_CSCODE {
                get {
                    try {
                        return ((string)(this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_CSCODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DQ_CSCODE\' in table \'TBPM_ORDER_CHECKREQUEST\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_CSCODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DQ_CSName {
                get {
                    try {
                        return ((string)(this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_CSNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DQ_CSName\' in table \'TBPM_ORDER_CHECKREQUEST\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_CSNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DQ_CSBank {
                get {
                    return ((string)(this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_CSBankColumn]));
                }
                set {
                    this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_CSBankColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DQ_CSAccount {
                get {
                    return ((string)(this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_CSAccountColumn]));
                }
                set {
                    this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_CSAccountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DQ_AMOUNT {
                get {
                    return ((decimal)(this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_AMOUNTColumn]));
                }
                set {
                    this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_AMOUNTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DQ_AMOUNTDX {
                get {
                    return ((string)(this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_AMOUNTDXColumn]));
                }
                set {
                    this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_AMOUNTDXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DQ_ZFFS {
                get {
                    return ((string)(this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_ZFFSColumn]));
                }
                set {
                    this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_ZFFSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DQ_BillCode {
                get {
                    try {
                        return ((string)(this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_BillCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DQ_BillCode\' in table \'TBPM_ORDER_CHECKREQUEST\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_BillCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DQ_STATE {
                get {
                    return ((int)(this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_STATEColumn]));
                }
                set {
                    this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_STATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DQ_BMYJ {
                get {
                    try {
                        return ((string)(this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_BMYJColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DQ_BMYJ\' in table \'TBPM_ORDER_CHECKREQUEST\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_BMYJColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DQ_ZGLD {
                get {
                    try {
                        return ((string)(this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_ZGLDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DQ_ZGLD\' in table \'TBPM_ORDER_CHECKREQUEST\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_ZGLDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DQ_GSLD {
                get {
                    try {
                        return ((string)(this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_GSLDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DQ_GSLD\' in table \'TBPM_ORDER_CHECKREQUEST\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_GSLDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DQ_CWSH {
                get {
                    try {
                        return ((string)(this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_CWSHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DQ_CWSH\' in table \'TBPM_ORDER_CHECKREQUEST\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_CWSHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DQ_Note {
                get {
                    try {
                        return ((string)(this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_NoteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DQ_Note\' in table \'TBPM_ORDER_CHECKREQUEST\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_NoteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDQ_BMNAMENull() {
                return this.IsNull(this.tableTBPM_ORDER_CHECKREQUEST.DQ_BMNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDQ_BMNAMENull() {
                this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_BMNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDQ_USENull() {
                return this.IsNull(this.tableTBPM_ORDER_CHECKREQUEST.DQ_USEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDQ_USENull() {
                this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_USEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDQ_DDCodeNull() {
                return this.IsNull(this.tableTBPM_ORDER_CHECKREQUEST.DQ_DDCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDQ_DDCodeNull() {
                this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_DDCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDQ_DDZJENull() {
                return this.IsNull(this.tableTBPM_ORDER_CHECKREQUEST.DQ_DDZJEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDQ_DDZJENull() {
                this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_DDZJEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDQ_CSCODENull() {
                return this.IsNull(this.tableTBPM_ORDER_CHECKREQUEST.DQ_CSCODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDQ_CSCODENull() {
                this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_CSCODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDQ_CSNameNull() {
                return this.IsNull(this.tableTBPM_ORDER_CHECKREQUEST.DQ_CSNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDQ_CSNameNull() {
                this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_CSNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDQ_BillCodeNull() {
                return this.IsNull(this.tableTBPM_ORDER_CHECKREQUEST.DQ_BillCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDQ_BillCodeNull() {
                this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_BillCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDQ_BMYJNull() {
                return this.IsNull(this.tableTBPM_ORDER_CHECKREQUEST.DQ_BMYJColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDQ_BMYJNull() {
                this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_BMYJColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDQ_ZGLDNull() {
                return this.IsNull(this.tableTBPM_ORDER_CHECKREQUEST.DQ_ZGLDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDQ_ZGLDNull() {
                this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_ZGLDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDQ_GSLDNull() {
                return this.IsNull(this.tableTBPM_ORDER_CHECKREQUEST.DQ_GSLDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDQ_GSLDNull() {
                this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_GSLDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDQ_CWSHNull() {
                return this.IsNull(this.tableTBPM_ORDER_CHECKREQUEST.DQ_CWSHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDQ_CWSHNull() {
                this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_CWSHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDQ_NoteNull() {
                return this.IsNull(this.tableTBPM_ORDER_CHECKREQUEST.DQ_NoteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDQ_NoteNull() {
                this[this.tableTBPM_ORDER_CHECKREQUEST.DQ_NoteColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TBPM_ORDER_CHECKREQUESTRowChangeEvent : global::System.EventArgs {
            
            private TBPM_ORDER_CHECKREQUESTRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TBPM_ORDER_CHECKREQUESTRowChangeEvent(TBPM_ORDER_CHECKREQUESTRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TBPM_ORDER_CHECKREQUESTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace ZCZJ_DPF.Contract_Data.CR_NotContractOrder_DataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TBPM_ORDER_CHECKREQUESTTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TBPM_ORDER_CHECKREQUESTTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TBPM_ORDER_CHECKREQUEST";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("DQ_ID", "DQ_ID");
            tableMapping.ColumnMappings.Add("DQ_DATA", "DQ_DATA");
            tableMapping.ColumnMappings.Add("DQ_QKBM", "DQ_QKBM");
            tableMapping.ColumnMappings.Add("DQ_BMNAME", "DQ_BMNAME");
            tableMapping.ColumnMappings.Add("DQ_QKR", "DQ_QKR");
            tableMapping.ColumnMappings.Add("DQ_USE", "DQ_USE");
            tableMapping.ColumnMappings.Add("DQ_DDCode", "DQ_DDCode");
            tableMapping.ColumnMappings.Add("DQ_DDZJE", "DQ_DDZJE");
            tableMapping.ColumnMappings.Add("DQ_CSCODE", "DQ_CSCODE");
            tableMapping.ColumnMappings.Add("DQ_CSName", "DQ_CSName");
            tableMapping.ColumnMappings.Add("DQ_CSBank", "DQ_CSBank");
            tableMapping.ColumnMappings.Add("DQ_CSAccount", "DQ_CSAccount");
            tableMapping.ColumnMappings.Add("DQ_AMOUNT", "DQ_AMOUNT");
            tableMapping.ColumnMappings.Add("DQ_AMOUNTDX", "DQ_AMOUNTDX");
            tableMapping.ColumnMappings.Add("DQ_ZFFS", "DQ_ZFFS");
            tableMapping.ColumnMappings.Add("DQ_BillCode", "DQ_BillCode");
            tableMapping.ColumnMappings.Add("DQ_STATE", "DQ_STATE");
            tableMapping.ColumnMappings.Add("DQ_BMYJ", "DQ_BMYJ");
            tableMapping.ColumnMappings.Add("DQ_ZGLD", "DQ_ZGLD");
            tableMapping.ColumnMappings.Add("DQ_GSLD", "DQ_GSLD");
            tableMapping.ColumnMappings.Add("DQ_CWSH", "DQ_CWSH");
            tableMapping.ColumnMappings.Add("DQ_Note", "DQ_Note");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TBPM_ORDER_CHECKREQUEST] WHERE (([ID] = @Original_ID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[TBPM_ORDER_CHECKREQUEST] ([DQ_ID], [DQ_DATA], [DQ_QKBM], [DQ_BMNAME], [DQ_QKR], [DQ_USE], [DQ_DDCode], [DQ_DDZJE], [DQ_CSCODE], [DQ_CSName], [DQ_CSBank], [DQ_CSAccount], [DQ_AMOUNT], [DQ_AMOUNTDX], [DQ_ZFFS], [DQ_BillCode], [DQ_STATE], [DQ_BMYJ], [DQ_ZGLD], [DQ_GSLD], [DQ_CWSH], [DQ_Note]) VALUES (@DQ_ID, @DQ_DATA, @DQ_QKBM, @DQ_BMNAME, @DQ_QKR, @DQ_USE, @DQ_DDCode, @DQ_DDZJE, @DQ_CSCODE, @DQ_CSName, @DQ_CSBank, @DQ_CSAccount, @DQ_AMOUNT, @DQ_AMOUNTDX, @DQ_ZFFS, @DQ_BillCode, @DQ_STATE, @DQ_BMYJ, @DQ_ZGLD, @DQ_GSLD, @DQ_CWSH, @DQ_Note)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_ID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_DATA", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_DATA", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_QKBM", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_QKBM", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_BMNAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_BMNAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_QKR", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_QKR", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_USE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_USE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_DDCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_DDCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_DDZJE", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DQ_DDZJE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_CSCODE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_CSCODE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_CSName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_CSName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_CSBank", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_CSBank", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_CSAccount", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_CSAccount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_AMOUNT", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DQ_AMOUNT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_AMOUNTDX", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_AMOUNTDX", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_ZFFS", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_ZFFS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_BillCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_BillCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_STATE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_STATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_BMYJ", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_BMYJ", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_ZGLD", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_ZGLD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_GSLD", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_GSLD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_CWSH", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_CWSH", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_Note", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_Note", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TBPM_ORDER_CHECKREQUEST] SET [DQ_ID] = @DQ_ID, [DQ_DATA] = @DQ_DATA, [DQ_QKBM] = @DQ_QKBM, [DQ_BMNAME] = @DQ_BMNAME, [DQ_QKR] = @DQ_QKR, [DQ_USE] = @DQ_USE, [DQ_DDCode] = @DQ_DDCode, [DQ_DDZJE] = @DQ_DDZJE, [DQ_CSCODE] = @DQ_CSCODE, [DQ_CSName] = @DQ_CSName, [DQ_CSBank] = @DQ_CSBank, [DQ_CSAccount] = @DQ_CSAccount, [DQ_AMOUNT] = @DQ_AMOUNT, [DQ_AMOUNTDX] = @DQ_AMOUNTDX, [DQ_ZFFS] = @DQ_ZFFS, [DQ_BillCode] = @DQ_BillCode, [DQ_STATE] = @DQ_STATE, [DQ_BMYJ] = @DQ_BMYJ, [DQ_ZGLD] = @DQ_ZGLD, [DQ_GSLD] = @DQ_GSLD, [DQ_CWSH] = @DQ_CWSH, [DQ_Note] = @DQ_Note WHERE (([ID] = @Original_ID))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_ID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_DATA", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_DATA", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_QKBM", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_QKBM", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_BMNAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_BMNAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_QKR", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_QKR", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_USE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_USE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_DDCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_DDCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_DDZJE", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DQ_DDZJE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_CSCODE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_CSCODE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_CSName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_CSName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_CSBank", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_CSBank", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_CSAccount", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_CSAccount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_AMOUNT", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DQ_AMOUNT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_AMOUNTDX", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_AMOUNTDX", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_ZFFS", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_ZFFS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_BillCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_BillCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_STATE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_STATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_BMYJ", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_BMYJ", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_ZGLD", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_ZGLD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_GSLD", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_GSLD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_CWSH", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_CWSH", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DQ_Note", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DQ_Note", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["TSConnectionString1"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT ID, DQ_ID, DQ_DATA, DQ_QKBM, DQ_BMNAME, DQ_QKR, DQ_USE, DQ_DDCode, DQ_DDZJE, DQ_CSCODE, DQ_CSName, DQ_CSBank, DQ_CSAccount, DQ_AMOUNT, DQ_AMOUNTDX, DQ_ZFFS, DQ_BillCode, DQ_STATE, DQ_BMYJ, DQ_ZGLD, DQ_GSLD, DQ_CWSH, DQ_Note FROM dbo.TBPM_ORDER_CHECKREQUEST";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(CR_NotContractOrder_DataSet.TBPM_ORDER_CHECKREQUESTDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual CR_NotContractOrder_DataSet.TBPM_ORDER_CHECKREQUESTDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            CR_NotContractOrder_DataSet.TBPM_ORDER_CHECKREQUESTDataTable dataTable = new CR_NotContractOrder_DataSet.TBPM_ORDER_CHECKREQUESTDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CR_NotContractOrder_DataSet.TBPM_ORDER_CHECKREQUESTDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CR_NotContractOrder_DataSet dataSet) {
            return this.Adapter.Update(dataSet, "TBPM_ORDER_CHECKREQUEST");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string DQ_ID, 
                    System.DateTime DQ_DATA, 
                    string DQ_QKBM, 
                    string DQ_BMNAME, 
                    string DQ_QKR, 
                    string DQ_USE, 
                    string DQ_DDCode, 
                    global::System.Nullable<decimal> DQ_DDZJE, 
                    string DQ_CSCODE, 
                    string DQ_CSName, 
                    string DQ_CSBank, 
                    string DQ_CSAccount, 
                    decimal DQ_AMOUNT, 
                    string DQ_AMOUNTDX, 
                    string DQ_ZFFS, 
                    string DQ_BillCode, 
                    int DQ_STATE, 
                    string DQ_BMYJ, 
                    string DQ_ZGLD, 
                    string DQ_GSLD, 
                    string DQ_CWSH, 
                    string DQ_Note) {
            if ((DQ_ID == null)) {
                throw new global::System.ArgumentNullException("DQ_ID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(DQ_ID));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(DQ_DATA));
            if ((DQ_QKBM == null)) {
                throw new global::System.ArgumentNullException("DQ_QKBM");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(DQ_QKBM));
            }
            if ((DQ_BMNAME == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(DQ_BMNAME));
            }
            if ((DQ_QKR == null)) {
                throw new global::System.ArgumentNullException("DQ_QKR");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(DQ_QKR));
            }
            if ((DQ_USE == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(DQ_USE));
            }
            if ((DQ_DDCode == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(DQ_DDCode));
            }
            if ((DQ_DDZJE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((decimal)(DQ_DDZJE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((DQ_CSCODE == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(DQ_CSCODE));
            }
            if ((DQ_CSName == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(DQ_CSName));
            }
            if ((DQ_CSBank == null)) {
                throw new global::System.ArgumentNullException("DQ_CSBank");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(DQ_CSBank));
            }
            if ((DQ_CSAccount == null)) {
                throw new global::System.ArgumentNullException("DQ_CSAccount");
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(DQ_CSAccount));
            }
            this.Adapter.InsertCommand.Parameters[12].Value = ((decimal)(DQ_AMOUNT));
            if ((DQ_AMOUNTDX == null)) {
                throw new global::System.ArgumentNullException("DQ_AMOUNTDX");
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(DQ_AMOUNTDX));
            }
            if ((DQ_ZFFS == null)) {
                throw new global::System.ArgumentNullException("DQ_ZFFS");
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(DQ_ZFFS));
            }
            if ((DQ_BillCode == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(DQ_BillCode));
            }
            this.Adapter.InsertCommand.Parameters[16].Value = ((int)(DQ_STATE));
            if ((DQ_BMYJ == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(DQ_BMYJ));
            }
            if ((DQ_ZGLD == null)) {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(DQ_ZGLD));
            }
            if ((DQ_GSLD == null)) {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(DQ_GSLD));
            }
            if ((DQ_CWSH == null)) {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(DQ_CWSH));
            }
            if ((DQ_Note == null)) {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(DQ_Note));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string DQ_ID, 
                    System.DateTime DQ_DATA, 
                    string DQ_QKBM, 
                    string DQ_BMNAME, 
                    string DQ_QKR, 
                    string DQ_USE, 
                    string DQ_DDCode, 
                    global::System.Nullable<decimal> DQ_DDZJE, 
                    string DQ_CSCODE, 
                    string DQ_CSName, 
                    string DQ_CSBank, 
                    string DQ_CSAccount, 
                    decimal DQ_AMOUNT, 
                    string DQ_AMOUNTDX, 
                    string DQ_ZFFS, 
                    string DQ_BillCode, 
                    int DQ_STATE, 
                    string DQ_BMYJ, 
                    string DQ_ZGLD, 
                    string DQ_GSLD, 
                    string DQ_CWSH, 
                    string DQ_Note, 
                    int Original_ID) {
            if ((DQ_ID == null)) {
                throw new global::System.ArgumentNullException("DQ_ID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(DQ_ID));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(DQ_DATA));
            if ((DQ_QKBM == null)) {
                throw new global::System.ArgumentNullException("DQ_QKBM");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(DQ_QKBM));
            }
            if ((DQ_BMNAME == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(DQ_BMNAME));
            }
            if ((DQ_QKR == null)) {
                throw new global::System.ArgumentNullException("DQ_QKR");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(DQ_QKR));
            }
            if ((DQ_USE == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(DQ_USE));
            }
            if ((DQ_DDCode == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(DQ_DDCode));
            }
            if ((DQ_DDZJE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(DQ_DDZJE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((DQ_CSCODE == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(DQ_CSCODE));
            }
            if ((DQ_CSName == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(DQ_CSName));
            }
            if ((DQ_CSBank == null)) {
                throw new global::System.ArgumentNullException("DQ_CSBank");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(DQ_CSBank));
            }
            if ((DQ_CSAccount == null)) {
                throw new global::System.ArgumentNullException("DQ_CSAccount");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(DQ_CSAccount));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((decimal)(DQ_AMOUNT));
            if ((DQ_AMOUNTDX == null)) {
                throw new global::System.ArgumentNullException("DQ_AMOUNTDX");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(DQ_AMOUNTDX));
            }
            if ((DQ_ZFFS == null)) {
                throw new global::System.ArgumentNullException("DQ_ZFFS");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(DQ_ZFFS));
            }
            if ((DQ_BillCode == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(DQ_BillCode));
            }
            this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(DQ_STATE));
            if ((DQ_BMYJ == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(DQ_BMYJ));
            }
            if ((DQ_ZGLD == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(DQ_ZGLD));
            }
            if ((DQ_GSLD == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(DQ_GSLD));
            }
            if ((DQ_CWSH == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(DQ_CWSH));
            }
            if ((DQ_Note == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(DQ_Note));
            }
            this.Adapter.UpdateCommand.Parameters[22].Value = ((int)(Original_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private TBPM_ORDER_CHECKREQUESTTableAdapter _tBPM_ORDER_CHECKREQUESTTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TBPM_ORDER_CHECKREQUESTTableAdapter TBPM_ORDER_CHECKREQUESTTableAdapter {
            get {
                return this._tBPM_ORDER_CHECKREQUESTTableAdapter;
            }
            set {
                this._tBPM_ORDER_CHECKREQUESTTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._tBPM_ORDER_CHECKREQUESTTableAdapter != null) 
                            && (this._tBPM_ORDER_CHECKREQUESTTableAdapter.Connection != null))) {
                    return this._tBPM_ORDER_CHECKREQUESTTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._tBPM_ORDER_CHECKREQUESTTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(CR_NotContractOrder_DataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._tBPM_ORDER_CHECKREQUESTTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TBPM_ORDER_CHECKREQUEST.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tBPM_ORDER_CHECKREQUESTTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(CR_NotContractOrder_DataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._tBPM_ORDER_CHECKREQUESTTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TBPM_ORDER_CHECKREQUEST.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tBPM_ORDER_CHECKREQUESTTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(CR_NotContractOrder_DataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._tBPM_ORDER_CHECKREQUESTTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TBPM_ORDER_CHECKREQUEST.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tBPM_ORDER_CHECKREQUESTTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(CR_NotContractOrder_DataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._tBPM_ORDER_CHECKREQUESTTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tBPM_ORDER_CHECKREQUESTTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._tBPM_ORDER_CHECKREQUESTTableAdapter != null)) {
                    revertConnections.Add(this._tBPM_ORDER_CHECKREQUESTTableAdapter, this._tBPM_ORDER_CHECKREQUESTTableAdapter.Connection);
                    this._tBPM_ORDER_CHECKREQUESTTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tBPM_ORDER_CHECKREQUESTTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tBPM_ORDER_CHECKREQUESTTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tBPM_ORDER_CHECKREQUESTTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tBPM_ORDER_CHECKREQUESTTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._tBPM_ORDER_CHECKREQUESTTableAdapter != null)) {
                    this._tBPM_ORDER_CHECKREQUESTTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tBPM_ORDER_CHECKREQUESTTableAdapter]));
                    this._tBPM_ORDER_CHECKREQUESTTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591